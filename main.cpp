#include <iostream>
#include <array>

// size of memory
constexpr uint16_t mem_size = 4096;

// size of font
constexpr uint16_t font_size = 80;

// Chip 8 memory starts at address 0x200
// the previous mem space is reserved for the interpreter
constexpr uint16_t mem_start =  0x200;

// font memory starts at 0x050
constexpr uint16_t font_start = 0x050;


struct chip8
{
    std::array <uint8_t, mem_size> memory;
};

void initialize(chip8& Chip8);

const std::array <uint8_t, font_size> font = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

int main(){

    chip8 Chip8;
    initialize(Chip8);
    
}

// intializes chip 8
void initialize(chip8& Chip8){
    // set all mem to 0
    for (std::size_t i=0; i < Chip8.memory.size(); i++){
        Chip8.memory[i] = 0x00;
    }
    // store font in font address
    for (std::size_t i=0; i < font.size();i++){
        Chip8.memory[font_start + i] = font[i];
    }
    
}